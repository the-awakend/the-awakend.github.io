<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Markdown语法整理]]></title>
    <url>%2F2019%2F04%2F17%2Ffirst-blog%2F</url>
    <content type="text"><![CDATA[Markdown语法整理：Markdown是一门比html更简单的标记语言，其主要用于日常写作,最终通过相应的编辑器或者脚本转换成html用于页面渲染。由于markdown基础语法的限制，出现了一些加强版的语法设计，如下文提到的markdown plus。不同的写作工具或平台采用的标准不一样，可能会有一些语法差异。 1、标题 Headers​ 几级标题就使用几个”#”，最多支持六级标题，注意 # 和文字中间的空格不可缺 1 2 3 # this is a &lt;h1&gt; tag（一级标题） ## This is an &lt;h2&gt; tag（二级标题） ###### This is an &lt;h6&gt; tag（六级标题） 2、强调 Emphasis​ 通过在文字两侧加入星号 (*)或者下划线(_)或者波浪线(~)来实现文本的强调，注意符号和文本之间没有空格 1 2 3 4 *斜体 italic* 或者 _斜体 italic_ **粗体 bold** 或者 _粗体 bold_ ~~删除线~~ 以上格式可以混合使用 3、列表 List列表项目标记通常是放在最左边，但是其实也可以缩进，在创造嵌套列表时，如果在一级列表下要添加二级列表、引用或者段落、代码块等，需要在下一行使用制表符Tab。 1) 无序列表 unordered list 无序列表使用 - + * 任何一种单字符都可以，注意符号和文本之间有空格 1 2 3 4 * item 1 * item 2 * item2a * item2b 2) 顺序列表 ordered list 使用阿拉伯数字加点号的方式，注意数字和点号之间没有空格，而点号和文本之间有空格 1 2 3 4 5 1. item1 2. item2 * item2a * item2b 3. item3 4) 使用HTML格式插入列表，markdown的格式是可以转换成HTML的，不止是列表，其他的一切元素比如图像、链接的插入，你都可以使用HTML的格式来写作，这是完全允许的，直接再文章中写就行。 比如： 1 2 3 4 5 6 7 8 9 10 &lt;Ol&gt; &lt;li&gt; item1 &lt;/li&gt; &lt;li&gt; item2 &lt;/li&gt; &lt;ul&gt; &lt;li&gt; item2a &lt;/li&gt; &lt;li&gt; item2b &lt;/li&gt; &lt;/ul&gt; &lt;li&gt; item3 &lt;/li&gt; &lt;ol&gt; 显示效果如下： item1 item2 item2a item2b item 3 这和我们直接使用Markdown语法是完全一样的。 3、引用再引用区块内，可以使用其他的markdown语法元素，包括标题、列表、代码块等 3.1 普通引用 引用的内容可以使用 &gt; 来表示，符号和文本之间可以有空格也可以没有 1 &gt; 秦时明月 3.2.嵌套引用 在当前引用层再加上 ‘&gt;’ 即可，示例： 1 2 3 &gt; 得到了不该得到的，就会失去不该失去的 &gt; 星星为什么这么渺小? 那是因为他们把自己放的太高了 &gt; 天下皆白，唯我独黑，非攻墨门，兼爱平生 预览效果： 得到了不该得到的，就会失去不该失去的 星星为什么这么渺小? 那是因为他们把自己放的太高了 天下皆白，唯我独黑，非攻墨门，简爱平生 4、代码块 code 行内代码 用一个反引号将代码包裹 ( ` ) 包起来，空格随意 1 ` print &apos;hello world&apos; ` 代码块 连用三个反引号将代码包起来 ( ``` )，注意当输入左边的三个反引号后，换行才能显示代码块,本文中所有的示例都是用的代码块书写 1 2 def f(x): return x**2 + x**(1/2) 可以使用不同语言来生成代码，如：javascript代码，在typora中生成代码块后会自动提示 ```javascript ​ var num = 0 ​ for (var i = 0; i &lt; 5; i++) { ​ num+=i; ​ } ​ console.log(num); ``` 5、分割线 horizontal rules三个或者三个以上的 - 或者 * 就可以实现分割线的效果，效果如下 6、插入表格 table按照如下语法画出表格的形状即可，在编辑代码时不需要考虑对齐（但是为了美观和逻辑的直观，建议代码整齐）。竖线 ( | ) 用来分栏，短横线 ( - ) 用来分割表头和其他部分，冒号( : )用于标记表格内容的对齐方式，默认左对齐。所有符号之间的空格会被忽略，不影响布局。表格的语句上一行必须为空行，不然表格不生效。但是在Typora等一些工具中会自动补全。例如下： 1 2 3 4 | 左对齐标题 | 右对齐标题 | 居中标题 | | :----- | -----: | :-----: | | 老板啊，蛋炒饭 ! 好嘞，来咯| 七块钱，不用找 | | 老板啊，再涨点| 能干干，不能滚 | 好嘞，了解 | 效果如下： 左对齐标题 右对齐标题 居中标题 老板啊，蛋炒饭 好嘞，来咯 七块钱，不用找 老板啊，再涨点 能干干，不能滚 好嘞，了解 这里有个神奇网站，可以自动生成你想要的表格代码，以及HTML和LaTex代码 或者使用HTML写作： \&lt;table> 值班人员 星期一 星期二 星期三 小明 小红 小虎 \&lt;/table> 效果： 值日表 星期一 星期二 星期三 小明 小红 小虎 7、插入图像用 ![图片名](图片地址 “标题”) 来插入图片， 标题为可选项，它是当鼠标悬浮在图片时所显示的文本。在typora中可以直接拖拽本地图片到编辑器中。 行内式： 语法说明： ![图片](“图片地址 Title”)，示例 1 ![happy coding](https://github.com/the-awakend/photos/blob/master/timg.jpg &quot;Scarlett Johansson&quot;) 显示效果： ! happy coding 参考式: 在文档中要插入图片的地方，写 ![图片名][title] 在文档的最后写上[title]:图片地址 “ 图片名” 示例： 1 2 3 4 ![happy coding][Scarlett Johansson] ......文本内容...... ......文本内容...... [Scarlett Johansson]:https://github.com/the-awakend/photos/blob/master/timg.jpg &quot;Scarlett Johansson&quot; 显示效果： ![happy coding][Scarlett Johansson] 另外关于图像插入： 可以插入在线图片或者本地图片，注意在使用jupyter lab的时候，图片必须放在当前文件夹或当前文件夹的子文件夹下 1 2 ![Github](url &quot;title&quot;)（添加在线图片） ![Github](/images/logo.png &quot;title&quot;)（添加本地图片） 直接插入的图片，会自动靠在左侧，大小也无法由自己决定 我们可以使用类似HTML标签属性设置的方法来设置图片大小， 按照像素大小设置，直接插入一下代码，显示效果如下 1 &lt;img src=&quot;https://img-blog.csdn.net/20151129213701642&quot; width=50 height=50/&gt; &lt;img src=&quot;https://img-blog.csdn.net/20151129213701642&quot; width=256 height=256 /&gt; 按照一定比例显示，图在下面(反正就是可以按照HTML的语法来)： 1 &lt;img src=&quot;https://img-blog.csdn.net/20151129213701642&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt; 给图像加个标注，显示如下： 1 2 3 4 &lt;center&gt; &lt;img src=&quot;https://img-blog.csdn.net/20151129213701642&quot; width=&quot;25%&quot; height=&quot;25%&quot; /&gt; Figure 1. Lena &lt;/center&gt; Figure 1. Lena 使用Mou编辑器语法： 1 ![Mou icon](http://25.io/mou/Mou_128.png) 原图： 更改大小(不知道为啥显示不出来)： 1 ![Mou icon](http://25.io/mou/Mou_128.png =200x300) 或者： 1 ![Mou icon](http://25.io/mou/Mou_128.png =200x) 7、插入超链接Markdown 支持两种形式的链接语法： 行内式和参考式两种形式，行内式一般使用较多。 行内式: 使用[链接文字][链接地址 “链接标题”]的方式 1 2 3 欢迎来到[我的主页](https://the-awakend.github.io/) 欢迎来到[我的主页](https://the-awakend.github.io/ &quot;他的个人主页&quot;) 显示效果如下： 欢迎来到我的主页 欢迎来到我的主页 参考式: 和图像插入的参考式一样，一般学术论文多用，在插入位置写[链接文字][标记字符]，在文末写 [标记字符]:链接地址 “链接标题”，如： 1 2 3 4 5 6 7 我常去的几个网站[GitHub][1]、[知乎][2]以及[简书][3] ......文本内容...... ......文本内容...... [1]:https://github.com &quot;GitHub&quot; [2]:https://www.zhihu.com &quot;知乎&quot; [3]:http://www.jianshu.com &quot;简书&quot; 显示效果： 我常去的几个网站[GitHub][1]、[知乎][2]以及简书[3] 自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： 1 2 &lt;http://example.com&gt; &lt;address@example.com&gt; 显示效果： &#101;&#120;&#x61;&#109;&#x70;&#108;&#101;&#x40;&#x6f;&#117;&#x74;&#x6c;&#x6f;&#111;&#x6b;&#46;&#99;&#111;&#x6d; http://example.com 8、锚点这和web王爷中的锚点是一样的性质，网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。 注意：Markdown Extra 只支持在标题后插入锚点，其它地方无效。 语法描述:]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1 $ hexo new "My New Post" More info: Writing Run server1 $ hexo server More info: Server Generate static files1 $ hexo generate More info: Generating Deploy to remote sites1 $ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
